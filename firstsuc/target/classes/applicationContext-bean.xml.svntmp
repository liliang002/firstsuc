<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd  
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd 
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
    	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd"
		default-autowire="byName">

	<!-- 引入配置文件 -->
	<context:property-placeholder location="classpath:*.properties" />


	<!--bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location"> <value>WEB-INF/configInfo.properties</value> </property> 
		<property name="fileEncoding" value="utf-8" /> </bean -->

	<!-- 使用Spring组件扫描的方式来实现自动注入bean -->
	<context:component-scan base-package="com.liliang" />
<!-- 	<context:component-scan base-package="com.liliang" use-default-filters="false"> 
	 <context:include-filter type="annotation" expression="org.springframework.stereotype.controller" />
	 <context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
 	 <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	</context:component-scan> -->

	<!-- 统一异常处理方式 
	<bean id="exceptionHandler" class="com.lanyuan.exception.MyExceptionHandler" />-->

	<!-- <context:annotation-config /> -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<!-- <aop:aspectj-autoproxy proxy-target-class="true" /> -->

	<!-- 数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="maxPoolSize" value="100" />
		<property name="maxIdleTime" value="30" />
		<property name="checkoutTimeout" value="20000" />
		<property name="acquireIncrement" value="5" />
		<property name="minPoolSize" value="5" />
		<property name="initialPoolSize" value="5" />
	</bean>

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean"
		depends-on="dataSource">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">false</prop>
				<prop key="hibernate.jdbc.fetch_size">50</prop>
				<prop key="hibernate.jdbc.batch_size">25</prop>
				<!-- <prop key="hibernate.current_session_context_class">thread</prop> 可使用getCurrentSession时自己开启事务 -->
				<!-- <prop key="hibernate.connection.release_mode">after_transaction</prop 
					打开hibernate二级缓存 -->
<!-- 				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
				</prop> -->
				<!-- <prop key="hibernate.cache.use_query_cache">false</prop> -->

			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.liliang.entity</value>
			</list>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置Jdbc模板 liliang002 test > <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"> 
		<property name="dataSource" ref="dataSource"></property> </bean -->


	<!-- 如果是想通过设置Spring ID设置任务类，需要放开以下配置 可以使用此工具getBean直接取bean <bean id="springUtils" 
		class="com.wondertek.pay.util.SpringUtils" > </bean> -->

	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<aop:config>
		<aop:pointcut id="servicePointCut"
			expression="execution(* com.liliang.dao..* (..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="servicePointCut" />
	</aop:config>

	<!-- 用于持有ApplicationContext,可以使用SpringContextHolder.getBean('xxxx')的静态方法得到spring 
		bean对象 -->
	<!-- <bean class="com.xxl.app.base.SpringContextHolder" lazy-init="false" 
		/> -->

	<!-- 处理json的返回在前台混乱的问题 -->
<!-- 	<bean id="messageAdapter"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				Support JSON
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="exceptionMessageAdapter"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
		<property name="messageConverters">
			<list>
				Support JSON
				<bean
					class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean> -->

</beans>

